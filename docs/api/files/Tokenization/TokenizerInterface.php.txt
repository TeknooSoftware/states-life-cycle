<?php

/**
 * States.
 *
 * LICENSE
 *
 * This source file is subject to the MIT license and the version 3 of the GPL3
 * license that are bundled with this package in the folder licences
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to richarddeloge@gmail.com so we can send you a copy immediately.
 *
 *
 * @copyright   Copyright (c) 2009-2017 Richard Déloge (richarddeloge@gmail.com)
 *
 * @link        http://teknoo.software/states Project website
 *
 * @license     http://teknoo.software/license/mit         MIT License
 * @author      Richard Déloge <richarddeloge@gmail.com>
 */

namespace Teknoo\States\LifeCycle\Tokenization;

use Teknoo\States\LifeCycle\Event\EventInterface;

/**
 * Interface TokenizerInterface
 * Interface to build tokenizer to generate tokens from an event.
 *
 * Generate all tokens from an event, to be used by the event dispatcher, namespace separator are converted
 * to underscore, and the class is lowerized.
 * - a base token from the canonical stated class name
 * - a token by enabled states : "basetoken:<state name>"
 * - a token by incoming states : "basetoken:+<state name>"
 * - a token by outgoing states : "basetoken:-<state name>"
 *
 * @copyright   Copyright (c) 2009-2017 Richard Déloge (richarddeloge@gmail.com)
 *
 * @link        http://teknoo.software/states Project website
 *
 * @license     http://teknoo.software/license/mit         MIT License
 * @author      Richard Déloge <richarddeloge@gmail.com>
 */
interface TokenizerInterface
{
    /**
     * Generate all tokens from an event, to be used by the event dispatcher, namespace separator are converted
     * to underscore, and the class is lowerized.
     * - a base token from the canonical stated class name
     * - a token by enabled states : "basetoken:<state name>"
     * - a token by incoming states : "basetoken:+<state name>"
     * - a token by outgoing states : "basetoken:-<state name>".
     *
     * @param EventInterface $event
     *
     * @return string[]
     */
    public function getToken(EventInterface $event): array;
}

