<?php

/**
 * States.
 *
 * LICENSE
 *
 * This source file is subject to the MIT license and the version 3 of the GPL3
 * license that are bundled with this package in the folder licences
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to contact@uni-alteri.com so we can send you a copy immediately.
 *
 *
 * @copyright   Copyright (c) 2009-2016 Richard Déloge (richarddeloge@gmail.com)
 *
 * @link        http://teknoo.software/states Project website
 *
 * @license     http://teknoo.software/license/mit         MIT License
 * @author      Richard Déloge <richarddeloge@gmail.com>
 */
namespace Teknoo\States\LifeCycle\Trace;

use Teknoo\States\LifeCycle\Observing\ObservedInterface;

/**
 * Interface TraceInterface
 * Interface to build state trace about stated class to keep in memory the story of your object.
 *
 * @copyright   Copyright (c) 2009-2016 Richard Déloge (richarddeloge@gmail.com)
 *
 * @link        http://teknoo.software/states Project website
 *
 * @license     http://teknoo.software/license/mit         MIT License
 * @author      Richard Déloge <richarddeloge@gmail.com>
 */
interface TraceInterface
{
    /**
     * Get the raw list of event, ordered from the oldest entry to the new entry.
     *
     * @return \SplStack|EntryInterface[]
     */
    public function getTrace(): \SplStack;

    /**
     * To know if the strace is empty or not.
     *
     * @return bool
     */
    public function isEmpty(): bool;

    /**
     * Get the first entry in the trace (the oldest event).
     *
     * @return EntryInterface
     */
    public function getFirstEntry(): EntryInterface;

    /**
     * Get the last entry in the trace (the newest event).
     *
     * @return EntryInterface
     */
    public function getLastEntry(): EntryInterface;

    /**
     * To register a new event in the trace.
     *
     * @param ObservedInterface $observed
     * @param array             $enabledStatesList
     *
     * @return TraceInterface
     */
    public function addEntry(ObservedInterface $observed, array $enabledStatesList): TraceInterface;
}

